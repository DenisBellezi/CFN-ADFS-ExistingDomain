AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template Function: Create Certificate Authority, ADFS, AppStream and FSx in an existing AD.'
Parameters:
  Parameter01cCreateCA:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: Select YES to create a Certificate Authority infrastructure with Standalone Root CA and Enterprise Subordinate CA.
  Parameter01dCreateADFS:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: 'Select YES to create an ADFS Server. IMPORTANT: ADFS REQUIRES CERTIFICATE AUTHORITY.'
  Parameter01eCreateAppStream:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: 'Select YES to create AppStream infrastructure. IMPORTANT: APPSTREAM REQUIRES ADFS.'
  Parameter01fFSx:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: Select YES to create an FSx file system for Windows.
  Parameter02aAdministrator:
    Type: String
    Description: >-
      Enter a domain account with permissions to create computer accounts, users, groups, containers and certificate authority. REQUIREMENT: a member of the Domain Admins group (SELF_MANAGED_AD) or a member
      of AWS Delegated Administrators (AWS_MANAGED_AD).
  Parameter02bAdministratorPassword:
    Type: String
    NoEcho: 'true'
    Description: Enter the domain administrator password. The domain administrator account and password will be stored in Secrets Manager.
  Parameter02cDNSDomainName:
    Type: String
    AllowedPattern: ^([a-zA-Z0-9]+[\.-])+([a-zA-Z0-9])+$
    Description: Enter the Microsoft AD DNS Name.
  Parameter02dNetBiosName:
    Type: String
    MinLength: '02'
    MaxLength: '15'
    Description: Enter the Microsoft AD NETBIOS Name.
  Parameter02eDNSServer01:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: Enter the IP Address of Active Directory DNS Server 01.
  Parameter02fDNSServer02:
    Type: String
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: Enter the IP Address of Active Directory DNS Server 02.
  Parameter02gOUMemberServers:
    Type: String
    AllowedPattern: ^[^\u0000\u0085\u2028\u2029\r\n]{1,2000}$
    Description: Enter the distinghished name of an existing OU where the Subordinate CA, ADFS Server, and Helper Instance will be created.
  Parameter02iOUADFSContainer:
    Type: String
    AllowedPattern: ^[^\u0000\u0085\u2028\u2029\r\n]{1,2000}$
    Description: Enter the distinghished name of an existing OU where the service accounts, groups and ADFS container will be created.
  Parameter02jOUAppStream:
    Type: String
    AllowedPattern: ^[^\u0000\u0085\u2028\u2029\r\n]{1,2000}$
    Description: Enter the distinghished name of an existing OU where AppStream computer accounts will be created.
  Parameter02lOUFSx:
    Type: String
    AllowedPattern: ^[^\u0000\u0085\u2028\u2029\r\n]{1,2000}$
    Description: 'Enter the distinghished name of an existing OU where FSx computer accounts will be created. (NOTE: FSX computer accounts cannot be moved from this OU).'
  Parameter03aVPC:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC where the resources will be created.
  Parameter03bSubnetCA:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet where the Certificate Authority will be created.
  Parameter03cHelper:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet where the helper instance will be created.
  Parameter03dSubnetADFS:
    Type: AWS::EC2::Subnet::Id
    Description: 'Select the subnet where the ADFS server will be created. IMPORTANT: case you want ADFS to be accessible from the internet ensure that you selected a PUBLIC subnet.'
  Parameter03fSubnetAppStream:
    Type: List<AWS::EC2::Subnet::Id>
    Description: >-
      Select TWO subnets where the AppStream fleet will be created. (NOTE: Ensure that you selected PUBLIC subnets here, if you plan to set "AppStream Network" as PUBLIC in the "AppStream Settings" section).
  Parameter03gSubnetFSx:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select ONE subnet for SINGLE AZ FSx or TWO subnets for MULTI-AZ FSx.
  Parameter03gDHCPOptions:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: >-
      Select YES to create and associate DHCP Options to the VPC. IMPORTANT: All machines in the VPC obtaining IP settings via DHCP will be configured with DNS servers IP and DNS suffix as configured in
      the "Active Directory Settings" section.
  Parameter04aInstanceAMI:
    Type: String
    AllowedPattern: ^ami-.*
    Description: Enter the AMI ID of a "Windows Server 201x Base" in the region where the resources will be created.
  Parameter04bInstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m5.large
      - m4.xlarge
      - m5.xlarge
      - m4.2xlarge
      - m5.2xlarge
      - c4.large
      - c5.large
      - c4.xlarge
      - c5.xlarge
      - c4.2xlarge
      - c5.2xlarge
      - r4.large
      - r5.large
      - r4.xlarge
      - r5.xlarge
      - r4.2xlarge
      - r5.2xlarge
    Description: 'Select the instance type. Default: t2.medium'
  Parameter04cKeyPair:
    Default: dbbellez01
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select an available Key Pair in the region to create the EC2 instances.
  Parameter07aAutomatedDelegation:
    Type: String
    Default: 'YES'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: >-
      Select YES to automate the permissions delegation process for AppStream and FSx. Case you select NO AppStream and FSx will be initialized with the account specified in "Active Directory Settings\Domain
      Administrator Logon Name". RECOMMENDATION: create separate service accounts in AD with the permissions required by each AWS service.
  Parameter07bAppStreamGroup:
    Type: String
    Default: AWS-AS2FleetMgmt01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: >-
      Enter the Active Directory group name to which permissions will be delegated to allow creation of computer accounts by AppStream. (Requirements: ALPHANUMERIC and between 2 and 20 characters). Default:
      AWS-AS2FleetMgmt01
  Parameter07cAppStreamSvcAccount:
    Type: String
    Default: AWS-AS2SvcUsr01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: 'Enter the AppStream service account name. (Requirements: ALPHANUMERIC and between 2 and 20 characters). Default: AWS-AS2SvcUsr01'
  Parameter07dFSxGroup:
    Type: String
    Default: AWS-FSxMgmt01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: >-
      Enter he Active Directory group name to which permissions will be delegated to allow creation of computer accounts by FSx. (Requirements: ALPHANUMERIC and between 2 and 20 characters). Default: AWS-FSxMgmt01
  Parameter07eFSxSvcAccount:
    Type: String
    Default: AWS-FSxSvcUsr01
    AllowedPattern: ^[a-zA-Z0-9-]+$
    MinLength: '02'
    MaxLength: '20'
    Description: 'Enter the FSx service account name. (Requirements: ALPHANUMERIC and between 2 and 20 characters). Default: AWS-FSxSvcUsr01'
  Parameter07fAppStreamPass:
    Type: String
    NoEcho: 'true'
    Description: 'Enter the AppStream service password. The service account and password will be stored in Secrets Manager. (NOTE: Ensure that the password is compliant with Active Directory requirements).'
  Parameter07gFSxPass:
    Type: String
    NoEcho: 'true'
    Description: 'Enter the FSx service password. The service account and password will be stored in Secrets Manager. (NOTE: Ensure that the password is compliant with Active Directory requirements).'
  Parameter09aRootCAName:
    Type: String
    Default: RootCA01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the ROOT CA name. (Requirements: ALPHANUMERIC and between 2 and 15 characters). Default: RootCA01'
  Parameter09cRootCAKeyLength:
    Type: String
    Default: '4096'
    AllowedValues:
      - '4096'
      - '2048'
    Description: 'Select the Key Length of the ROOT CA. Default: 4096'
  Parameter09dRootCAHash:
    Type: String
    Default: SHA256
    AllowedValues:
      - SHA256
      - SHA384
      - SHA512
    Description: 'Select the Hash Algorithm of the ROOT CA. Default: SHA256'
  Parameter10aSubordinateCAName:
    Type: String
    Default: SubCA01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the Subordinate CA Name. (Requirements: ALPHANUMERIC and between 2 and 15 characters). Default: SubCA01'
  Parameter10cSubordinateCAKeyLength:
    Type: String
    Default: '2048'
    AllowedValues:
      - '4096'
      - '2048'
    Description: 'Select the Key Length of the SUBORDINATE CA. Default: 2048'
  Parameter10dSubordinateCAHash:
    Type: String
    Default: SHA256
    AllowedValues:
      - SHA256
      - SHA384
      - SHA512
    Description: 'Select the Hash Algorithm of the SUBORDINATE CA. Default: SHA256'
  Parameter12aADFSName:
    Type: String
    Default: ADFS01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the ADFS server name. (Requirements: ALPHANUMERIC and between 2 and 15 characters). Default: ADFS01'
  Parameter12bFederationServiceName:
    Type: String
    Default: adfs
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '63'
    Description: >-
      Enter the ADFS Federation Service Name. This string will be combined with the DNS domain specified in "Active Directory Settings\Active Directory DNS Name". (Requirements: ALPHANUMERIC and between
      2 and 63 characters). Default: adfs
  Parameter12dADFSServiceAccount:
    Type: String
    Default: FsSvcGmsa
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '15'
    Description: 'Enter the name of the Managed Service Account for ADFS. (Requirements: ALPHANUMERIC and between 2 and 15 characters). Default: FsSvcGmsa'
  Parameter12dADFSType:
    Type: String
    Default: VPC
    AllowedValues:
      - VPC
      - INTERNET
    Description: 'Select if ADFS security group will allow access from the VPC only or from the INTERNET also. (NOTE: INTERNET requires ADFS with a public FQDN and the respective record in a public DNS).
      Default: VPC '
  Parameter12eUpdateRoute53:
    Type: String
    Default: 'NO'
    AllowedValues:
      - 'YES'
      - 'NO'
    Description: >-
      Select YES to create the DNS A record as specified in "ADFS Settings\ADFS Federation Name" in the Route 53 DNS zone specified in "Active Directory Settings\Active Directory DNS Name". (NOTE: Certify
      that the Route 53 zone is functional and that there is no other records that can conflict with the record that will be created). Default: NO
  Parameter12fHostZoneID:
    Type: String
    MinLength: '1'
    Default: NOT_SPECIFIED
    AllowedPattern: ^[a-zA-Z0-9_]+$
    Description: If you selected YES above, enter the Hosted Zone ID of the Route 53 zone to be updated.
  Parameter20aAppStreamImage:
    Type: String
    MinLength: '1'
    Description: >-
      Enter the AppStream image name to create the fleet. You can find the names of images available in the AppStream Console or with command  "aws appstream describe-images --query Images[*].[Name,State]
      --region REGION_NAME --output table". (NOTE: Case you are not creating AppStream, insert at least one character in this field to meet its requirement).
  Parameter20bAppStreamInstanceType:
    Type: String
    Default: stream.standard.medium
    AllowedValues:
      - stream.standard.small
      - stream.standard.medium
      - stream.standard.large
      - stream.compute.large
      - stream.compute.xlarge
      - stream.compute.2xlarge
      - stream.compute.4xlarge
      - stream.compute.8xlarge
      - stream.memory.large
      - stream.memory.xlarge
      - stream.memory.2xlarge
      - stream.memory.4xlarge
      - stream.memory.8xlarge
      - stream.memory.z1d.large
      - stream.memory.z1d.xlarge
      - stream.memory.z1d.2xlarge
      - stream.memory.z1d.3xlarge
      - stream.memory.z1d.6xlarge
      - stream.memory.z1d.12xlarge
      - stream.graphics-design.large
      - stream.graphics-design.xlarge
      - stream.graphics-design.2xlarge
      - stream.graphics-design.4xlarge
      - stream.graphics-desktop.2xlarge
      - stream.graphics.g4dn.xlarge
      - stream.graphics.g4dn.2xlarge
      - stream.graphics.g4dn.4xlarge
      - stream.graphics.g4dn.8xlarge
      - stream.graphics.g4dn.12xlarge
      - stream.graphics.g4dn.16xlarge
      - stream.graphics-pro.4xlarge
      - stream.graphics-pro.8xlarge
      - stream.graphics-pro.16xlarge
    Description: 'Select the AppStream instance type. Default: stream.standard.medium'
  Parameter20cAppStreamFleetType:
    Type: String
    Default: ON_DEMAND
    AllowedValues:
      - ON_DEMAND
      - ALWAYS_ON
    Description: 'Select the AppStream fleet type. Defaut: ON_DEMAND'
  Parameter20dFleetStreamView:
    Type: String
    Default: DESKTOP
    AllowedValues:
      - APP
      - DESKTOP
    Description: 'Select the type of stream view for the AppStream fleet. (NOTE: APP requires an AppStream image configured with the desired applications). Default: DESKTOP'
  Parameter20eAppSNetwork:
    Type: String
    Default: PRIVATE
    AllowedValues:
      - PUBLIC
      - PRIVATE
    Description: 'Select if AppStream instances will be launched in PUBLIC or PRIVATE subnet. (NOTE: PUBLIC requires that you specify in "VPC Setttings" PUBLIC subnets for AppStream). Default: PRIVATE'
  Parameter20fAppStreamCapacity:
    Type: String
    Default: '2'
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
      - '10'
      - '20'
    Description: 'Select the AppStream fleet "Desired Capacity". Default: 2'
  Parameter20gAppSFleetStart:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Select if the AppStream Fleet must be started once created. To start the fleet: "true". To keep the fleet stopped: "false". Default: true'
  Parameter20hStackPersistentSettings:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Select "true" to enable "Application Settings Persistence" in the AppStream stack. Default: true'
  Parameter21aDeployType:
    Type: String
    Default: SINGLE_AZ_2
    AllowedValues:
      - SINGLE_AZ_1
      - SINGLE_AZ_2
      - MULTI_AZ_1
    Description: 'Select the FSx deployment type. (NOTE: Confirm the selection of ONE subnet for SINGLE_AZ or TWO subnets for MULTI_AZ in "VPC Settings\Subnet - FSx"). Default: SINGLE_AZ_2'
  Parameter21bStorageCapacity:
    Type: String
    Default: '32'
    AllowedPattern: '[+-]?(\d+(\.\d+)?|\.\d+)([eE][+-]?\d+)?'
    Description: 'Enter the FSx storage capacity in GiB. Minimum 32 ; Maximum 65536 '
  Parameter21cStorageType:
    Type: String
    Default: SSD
    AllowedValues:
      - SSD
      - HDD
    Description: 'Select the FSx storage type. (NOTE: SINGLE_AZ_1 requires SSD). Default: SSD'
  Parameter21dThroughput:
    Type: String
    Default: '8'
    AllowedValues:
      - '8'
      - '16'
      - '32'
      - '64'
      - '128'
      - '256'
      - '512'
      - '512'
      - '1014'
      - '2048'
    Description: 'Select the FSx throughput capacity in MB/s. Default: 8 MB/s'
  Parameter21eTagName:
    Type: String
    Default: FSx01
    AllowedPattern: ^[a-zA-Z0-9]+$
    MinLength: '02'
    MaxLength: '32'
    Description: 'Enter a value for the tag Name. (Requirements: ALPHANUMERIC and between 2 and 32 characters). Default: FSx01'
  Parameter21fDirectoryType:
    Type: String
    Default: SELF_MANAGED_AD
    AllowedValues:
      - AWS_MANAGED_AD
      - SELF_MANAGED_AD
    Description: 'Select Directory Service type to which FSx will be added. Default: SELF_MANAGED_AD'
  Parameter21gDirectoryID:
    Type: String
    MinLength: '1'
    Description: >-
      Enter the Directory ID, case you selected AWS_MANAGED_AD in the field above. (NOTE: Case your deployment is based on SELF_MANAGED_AD, insert at least one character in this field to meet its requirement).
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Resources Selection
        Parameters:
          - Parameter01cCreateCA
          - Parameter01dCreateADFS
          - Parameter01eCreateAppStream
          - Parameter01fFSx
          - Parameter01hInstallCWAgent
      - Label:
          default: Active Directory Settings
        Parameters:
          - Parameter02aAdministrator
          - Parameter02bAdministratorPassword
          - Parameter02cDNSDomainName
          - Parameter02dNetBiosName
          - Parameter02eDNSServer01
          - Parameter02fDNSServer02
          - Parameter02iOUADFSContainer
          - Parameter02gOUMemberServers
          - Parameter02jOUAppStream
          - Parameter02lOUFSx
      - Label:
          default: Active Directory - Automated Permissions Delegation
        Parameters:
          - Parameter07aAutomatedDelegation
          - Parameter07bAppStreamGroup
          - Parameter07cAppStreamSvcAccount
          - Parameter07fAppStreamPass
          - Parameter07dFSxGroup
          - Parameter07eFSxSvcAccount
          - Parameter07gFSxPass
      - Label:
          default: VPC Settings
        Parameters:
          - Parameter03aVPC
          - Parameter03bSubnetCA
          - Parameter03dSubnetADFS
          - Parameter03fSubnetAppStream
          - Parameter03gSubnetFSx
          - Parameter03cHelper
          - Parameter03gDHCPOptions
      - Label:
          default: EC2 Instance Specification
        Parameters:
          - Parameter04aInstanceAMI
          - Parameter04bInstanceType
          - Parameter04cKeyPair
      - Label:
          default: Certificate Authority Settings
        Parameters:
          - Parameter09aRootCAName
          - Parameter09bRootCAIP
          - Parameter09cRootCAKeyLength
          - Parameter09dRootCAHash
          - Parameter10aSubordinateCAName
          - Parameter10bSubordinateCAIP
          - Parameter10cSubordinateCAKeyLength
          - Parameter10dSubordinateCAHash
      - Label:
          default: ADFS Settings
        Parameters:
          - Parameter12aADFSName
          - Parameter12bFederationServiceName
          - Parameter12dADFSServiceAccount
          - Parameter12dADFSType
          - Parameter12eUpdateRoute53
          - Parameter12fHostZoneID
      - Label:
          default: AppStream Settings
        Parameters:
          - Parameter20aAppStreamImage
          - Parameter20bAppStreamInstanceType
          - Parameter20cAppStreamFleetType
          - Parameter20dFleetStreamView
          - Parameter20eAppSNetwork
          - Parameter20fAppStreamCapacity
          - Parameter20gAppSFleetStart
          - Parameter20hStackPersistentSettings
      - Label:
          default: FSx Settings
        Parameters:
          - Parameter21eTagName
          - Parameter21fDirectoryType
          - Parameter21gDirectoryID
          - Parameter21aDeployType
          - Parameter21bStorageCapacity
          - Parameter21cStorageType
          - Parameter21dThroughput
    ParameterLabels:
      Parameter01cCreateCA:
        default: Certificate Authority
      Parameter01dCreateADFS:
        default: ADFS
      Parameter01eCreateAppStream:
        default: AppStream
      Parameter01fFSx:
        default: FSx
      Parameter02aAdministrator:
        default: Domain Administrator Logon Name
      Parameter02bAdministratorPassword:
        default: Domain Administrator Password
      Parameter02cDNSDomainName:
        default: Active Directory DNS Name
      Parameter02dNetBiosName:
        default: Active Directory NETBIOS Name
      Parameter02eDNSServer01:
        default: IP Address DNS Server 01
      Parameter02fDNSServer02:
        default: IP Address DNS Server 02
      Parameter02gOUMemberServers:
        default: Organizational Unit for Member Server Accounts
      Parameter02jOUAppStream:
        default: Organizational Unit for AppStream Computer Accounts
      Parameter02iOUADFSContainer:
        default: Organizational Unit for Service Accounts, Groups and ADFS Container
      Parameter02lOUFSx:
        default: Organizational Unit for FSx Computer Accounts
      Parameter03aVPC:
        default: VPC ID
      Parameter03bSubnetCA:
        default: Subnet - Certificate Authority (Root CA and Subordinate CA)
      Parameter03dSubnetADFS:
        default: Subnet - ADFS
      Parameter03cHelper:
        default: Helper Instance - Automated Permissions Delegation
      Parameter03fSubnetAppStream:
        default: Subnet - AppStream
      Parameter03gSubnetFSx:
        default: Subnet - FSx
      Parameter03gDHCPOptions:
        default: DHCP Options
      Parameter04aInstanceAMI:
        default: AMI ID
      Parameter04bInstanceType:
        default: Instance Type
      Parameter04cKeyPair:
        default: Key Pair
      Parameter07aAutomatedDelegation:
        default: Perform Automated Permissions Delegation
      Parameter07bAppStreamGroup:
        default: AppStream Group
      Parameter07cAppStreamSvcAccount:
        default: AppStream Service Account
      Parameter07fAppStreamPass:
        default: AppStream Service Password
      Parameter07dFSxGroup:
        default: FSx Group
      Parameter07eFSxSvcAccount:
        default: FSx Service Account
      Parameter07gFSxPass:
        default: FSx Service Password
      Parameter09aRootCAName:
        default: Root CA Name
      Parameter09cRootCAKeyLength:
        default: Root CA Key Length
      Parameter09dRootCAHash:
        default: Root CA Hash Algorithm
      Parameter10aSubordinateCAName:
        default: Subordinate CA Name
      Parameter10cSubordinateCAKeyLength:
        default: Subordinate CA Key Length
      Parameter10dSubordinateCAHash:
        default: Subordinate CA Hash Algorithm
      Parameter12aADFSName:
        default: ADFS Server Name
      Parameter12bFederationServiceName:
        default: ADFS Federation Name
      Parameter12dADFSServiceAccount:
        default: ADFS Service Account
      Parameter12dADFSType:
        default: ADFS Accessibility
      Parameter12eUpdateRoute53:
        default: Create ADFS record in Route 53
      Parameter12fHostZoneID:
        default: Route 53 Hosted Zone ID
      Parameter20aAppStreamImage:
        default: AppStream Image Name
      Parameter20bAppStreamInstanceType:
        default: AppStream Instance Type
      Parameter20cAppStreamFleetType:
        default: AppStream Fleet Type
      Parameter20dFleetStreamView:
        default: AppStream Fleet Stream View
      Parameter20eAppSNetwork:
        default: AppStream Network
      Parameter20fAppStreamCapacity:
        default: AppStream Fleet Desired Capacity
      Parameter20gAppSFleetStart:
        default: AppStream Fleet Start
      Parameter20hStackPersistentSettings:
        default: AppStream Stack "Application Persistence Settings"
      Parameter21aDeployType:
        default: Deployment Type
      Parameter21bStorageCapacity:
        default: Storage Capacity
      Parameter21cStorageType:
        default: Storage Type
      Parameter21dThroughput:
        default: Throughput Capacity
      Parameter21eTagName:
        default: Name
      Parameter21fDirectoryType:
        default: Directory Service Type
      Parameter21gDirectoryID:
        default: Directory ID
Mappings: {}
Conditions:
  CreateCA: !Equals
    - !Ref 'Parameter01cCreateCA'
    - 'YES'
  CreateADFS: !Equals
    - !Ref 'Parameter01dCreateADFS'
    - 'YES'
  ADFSType: !Equals
    - !Ref 'Parameter12dADFSType'
    - VPC
  ADFSElasticIP: !Equals
    - !Ref 'Parameter12dADFSType'
    - INTERNET
  UpdateR53: !Equals
    - !Ref 'Parameter12eUpdateRoute53'
    - 'YES'
  CreateAppStream: !Equals
    - !Ref 'Parameter01eCreateAppStream'
    - 'YES'
  AppStreamNetwork: !Equals
    - !Ref 'Parameter20eAppSNetwork'
    - PRIVATE
  CreateDHCPOptions: !Equals
    - !Ref 'Parameter03gDHCPOptions'
    - 'YES'
  CreateFSx: !Equals
    - !Ref 'Parameter01fFSx'
    - 'YES'
  FSxMultiAZ: !Equals
    - !Ref 'Parameter21aDeployType'
    - MULTI_AZ_1
  FSxDirectoryType: !Equals
    - !Ref 'Parameter21fDirectoryType'
    - AWS_MANAGED_AD
  ADAutomatedDelegation: !Equals
    - !Ref 'Parameter07aAutomatedDelegation'
    - 'YES'
Resources:
  Resource23bSecurityGroupPrivateNetwork:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .InternalVPC
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .InternalVPC
      GroupDescription: Allow All Acccess From Sources in VPC
      VpcId: !Ref 'Parameter03aVPC'
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/8
        - IpProtocol: -1
          CidrIp: 172.16.0.0/12
        - IpProtocol: -1
          CidrIp: 192.168.0.0/16
  Resource23cSecurityInboundHTTP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .InboundHTTP-S
      GroupName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .InboundHTTP-S
      GroupDescription: Allow HTTP and HTTPS from the Internet
      VpcId: !Ref 'Parameter03aVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
  Resource27aDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Condition: CreateDHCPOptions
    Properties:
      DomainName: !Ref 'Parameter02cDNSDomainName'
      DomainNameServers:
        - !Ref 'Parameter02eDNSServer01'
        - !Ref 'Parameter02fDNSServer02'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .DHCPOptions
  Resource27bDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Condition: CreateDHCPOptions
    Properties:
      DhcpOptionsId: !Ref 'Resource27aDHCPOptions'
      VpcId: !Ref 'Parameter03aVPC'
  RoleADFSAdminAccess:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  RoleADFSAppStream:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
  RoleCAandADFS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  InstanceProfileADFSandCA:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'RoleCAandADFS'
  PasswordDomainAdministrator:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password created by CloudFormation - Domain Administrator
      SecretString: !Join
        - ''
        - - '{ "domain": "'
          - !Ref 'Parameter02dNetBiosName'
          - '"'
          - ',"username": "'
          - !Ref 'Parameter02aAdministrator'
          - '"'
          - ',"password": "'
          - !Ref 'Parameter02bAdministratorPassword'
          - '" }'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Administrator
  PasswordSVCFSx:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password created by CloudFormation - FSx Service
      SecretString: !Join
        - ''
        - - '{ "domain": "'
          - !Ref 'Parameter02dNetBiosName'
          - '"'
          - ',"username": "'
          - !Ref 'Parameter07eFSxSvcAccount'
          - '"'
          - ',"password": "'
          - !Ref 'Parameter07gFSxPass'
          - '" }'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .FSX.ServiceAccount
  PasswordSVCAppStream:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Password created by CloudFormation - AppStream Service
      SecretString: !Join
        - ''
        - - '{ "domain": "'
          - !Ref 'Parameter02dNetBiosName'
          - '"'
          - ',"username": "'
          - !Ref 'Parameter07cAppStreamSvcAccount'
          - '"'
          - ',"password": "'
          - !Ref 'Parameter07fAppStreamPass'
          - '" }'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .AppStream.ServiceAccount
  CustomerManagedSSMSessionManagerCore:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to enable Session Manager connection
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:GetEncryptionConfiguration
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource: '*'
      Roles:
        - !Ref 'RoleCAandADFS'
  CustomerManagedSSMSessionManagerS3Logs:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy to enable upload SessionManager Logs to S3
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - arn:aws:s3:::REPLACE-WITH-BUCKET-NAME
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - arn:aws:s3:::REPLACE-WITH-BUCKET-NAME/*
      Roles:
        - !Ref 'RoleCAandADFS'
  CustomerManagedGetPassword:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Enables instances to get the password for domain join and other tasks
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
      Roles:
        - !Ref 'RoleCAandADFS'
  CustomerManagedGetParameter:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Enables instances to get parameters from SSM Parameter Store
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:PutParameter
            Resource: '*'
      Roles:
        - !Ref 'RoleCAandADFS'
  CustomerManagedIdentityProviders:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy with permissions to manage SAML IdP in IAM
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:CreateSAMLProvider
              - iam:Get-SAMLProvider
              - iam:Delete-SAMLProvider
              - iam:ListSAMLProviders
              - iam:UpdateSAMLProvider
            Resource: '*'
      Roles:
        - !Ref 'RoleCAandADFS'
  CustomerManagedUpdateAssumeRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy with permissions to update Role Trust Policy
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:UpdateAssumeRolePolicy
            Resource: '*'
      Roles:
        - !Ref 'RoleCAandADFS'
  CustomerManagedUpdateSendSSMCommand:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy with permissions to update Role Trust Policy
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:SendCommand
            Resource: '*'
      Roles:
        - !Ref 'RoleCAandADFS'
  CustomerManagedAppStreamAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy with permissions to update Role Trust Policy
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: appstream:Stream
            Resource: !Join
              - ''
              - - 'arn:aws:appstream:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - :stack/*
            Condition:
              StringEquals:
                appstream:userId: ${saml:sub}
                saml:sub_type: persistent
      Roles:
        - !Ref 'RoleADFSAppStream'
  Resource30RootCA:
    Type: AWS::EC2::Instance
    Condition: CreateCA
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource30RootCA.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource30RootCA'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource30RootCA"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $CAStatus = (Get-Service | Where Name -EQ "CertSvc").Status
                  - "\n"
                  - If  ( $CAStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\Windows\CAPolicy.inf:
              content: !Join
                - ''
                - - '[Version]'
                  - "\n"
                  - Signature="$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Certsrv_Server]'
                  - "\n"
                  - RenewalKeyLength=4096
                  - "\n"
                  - RenewalValidityPeriod=Years
                  - "\n"
                  - RenewalValidityPeriodUnits=10
                  - "\n"
                  - CRLPeriod=Years
                  - "\n"
                  - CRLPeriodUnits=10
                  - "\n"
                  - AlternateSignatureAlgorithm=0
                  - "\n"
                  - "\n"
                  - '[BasicConstraintsExtension]'
                  - "\n"
                  - PathLength=1
                  - "\n"
                  - Critical=Yes
                  - "\n"
                  - "\n"
                  - '[AuthorityInformationAccess]'
                  - "\n"
                  - Empty = true
                  - "\n"
                  - "\n"
                  - '[CRLDistributionPoint]'
                  - "\n"
                  - Empty = true
                  - "\n"
            C:\cfn\01-PrepareRootCA.ps1:
              content: !Join
                - ''
                - - Write-Output "SET STATIC IP"
                  - "\n"
                  - 'Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses '
                  - !Ref 'Parameter02eDNSServer01'
                  - ','
                  - !Ref 'Parameter02fDNSServer02'
                  - "\n"
                  - Set-DnsClient -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ConnectionSpecificSuffix "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList @("
                  - !Ref 'Parameter02cDNSDomainName'
                  - '")'
                  - "\n"
                  - "\n"
                  - Write-Output "ENABLE PSREMOTING"
                  - "\n"
                  - Enable-PSRemoting -SkipNetworkProfileCheck -Force
                  - "\n"
                  - Set-NetFirewallRule -Name "WINRM-HTTP-In-TCP-PUBLIC" -RemoteAddress Any
                  - "\n"
                  - "\n"
                  - Write-Output "SET LOCAL PASSWORD AND RENAME INSTANCE. ROOT CA IS NOT MEMBER OF THE DOMAIN"
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - Net User Administrator $administratorPWD
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter09aRootCAName'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
            C:\cfn\02-InstallCAFeature.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\02-InstallCAFeature.Transcript.log -Append
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $RootCADistinguishedName = "DC=" + $domainname -Replace "\.", ",DC="
                  - "\n"
                  - $RootCAType = "StandaloneRootCA"
                  - "\n"
                  - $RootCACommonName = "
                  - !Ref 'Parameter09aRootCAName'
                  - '"'
                  - "\n"
                  - $RootCAKeyLength = "
                  - !Ref 'Parameter09cRootCAKeyLength'
                  - '"'
                  - "\n"
                  - $RootCAValidityPeriod = "Years"
                  - "\n"
                  - $RootCAValidityPeriodUnits = "10"
                  - "\n"
                  - $RootCAHashAlgorithm = "
                  - !Ref 'Parameter09dRootCAHash'
                  - '"'
                  - "\n"
                  - $RootCACryptoProvider = "RSA#Microsoft Software Key Storage Provider"
                  - "\n"
                  - $ValidityCertificatesIssuedbyRootCA = "6"
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL ROOT CA"
                  - "\n"
                  - Install-WindowsFeature ADCS-Cert-Authority
                  - "\n"
                  - Install-WindowsFeature RSAT-ADCS-Mgmt
                  - "\n"
                  - >-
                    Install-AdcsCertificationAuthority -CAType $RootCAType -CACommonName $RootCACommonName -CADistinguishedNameSuffix $RootCADistinguishedName -CryptoProviderName $RootCACryptoProvider -HashAlgorithmName
                    $RootCAHashAlgorithm -KeyLength $RootCAKeyLength -ValidityPeriod $RootCAValidityPeriod -ValidityPeriodUnits $RootCAValidityPeriodUnits -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CONFIGURE ROOT CA REGISTRY KEYS"
                  - "\n"
                  - Set-ItemProperty 'HKLM:\\SYSTEM\CurrentControlSet\Services\CertSvc\Configuration\
                  - !Ref 'Parameter09aRootCAName'
                  - \PolicyModules\CertificateAuthority_MicrosoftDefault.Policy' -Name 'RequestDisposition' -Value 1
                  - "\n"
                  - Set-ItemProperty 'HKLM:\\SYSTEM\CurrentControlSet\Services\CertSvc\Configuration\
                  - !Ref 'Parameter09aRootCAName'
                  - \' -Name 'ValidityPeriodUnits' -Value $ValidityCertificatesIssuedbyRootCA
                  - "\n"
                  - Write-Output "CONFIGURE CDP AND AIA"
                  - "\n"
                  - Add-CACRLDistributionPoint -Uri "http://
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - /<CAName><DeltaCRLAllowed>.crl"  -AddToCertificateCdp -AddToFreshestCrl -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "http://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "ldap:///CN=<CATruncatedName>,CN=AIA,CN=Public Key Services,CN=Services,<ConfigurationContainer><CAObjectClass>" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "file://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - Add-CAAuthorityInformationAccess -AddToCertificateAia -uri "http://
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - /<ServerDNSName>_<CAName>.crt" -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "ldap:///CN=<CATruncatedName><CRLNameSuffix>,CN=<ServerShortName>,CN=CDP,CN=Public Key Services,CN=Services,<ConfigurationContainer><CDPObjectClass>"
                    -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "file://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "http://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
          commands:
            '01-PrepareRootCA':
              command: Powershell.exe -Command C:\cfn\01-PrepareRootCA.ps1
              waitAfterCompletion: forever
            '02-InstallCAFeature':
              command: Powershell.exe -Command C:\cfn\02-InstallCAFeature.ps1
              waitAfterCompletion: forever
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      InstanceType: !Ref 'Parameter04bInstanceType'
      IamInstanceProfile: !Ref 'InstanceProfileADFSandCA'
      SubnetId: !Ref 'Parameter03bSubnetCA'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      KeyName: !Ref 'Parameter04cKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter09aRootCAName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource30RootCA '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource31SubCA:
    Type: AWS::EC2::Instance
    DependsOn: Resource30RootCA
    Condition: CreateCA
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource31SubCA.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource31SubCA'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource31SubCA"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $SubCAStatus = (Get-Service | Where Name -EQ "CertSvc").Status
                  - "\n"
                  - If  ( $SubCAStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $IISStatus = (Get-Service | Where Name -EQ "W3SVC").Status
                  - "\n"
                  - If  ( $IISStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\Windows\CAPolicy.inf:
              content: !Join
                - ''
                - - '[Version]'
                  - "\n"
                  - Signature="$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Certsrv_Server]'
                  - "\n"
                  - RenewalKeyLength=2048
                  - "\n"
                  - CRLPeriod=Months
                  - "\n"
                  - CRLPeriodUnits=01
                  - "\n"
                  - CRLDeltaPeriod=Weeks
                  - "\n"
                  - CRLDeltaPeriodUnits=1
                  - "\n"
                  - LoadDefaultTemplates=True
                  - "\n"
                  - "\n"
            C:\cfn\web.config:
              content: !Join
                - ''
                - - <?xml version="1.0" encoding="UTF-8"?>
                  - "\n"
                  - "\t<configuration>"
                  - "\n"
                  - "\t\t<system.webServer>"
                  - "\n"
                  - "\t\t\t<directoryBrowse enabled=\"true\" />"
                  - "\n"
                  - "\t\t\t<security>"
                  - "\n"
                  - "\t\t\t\t<requestFiltering allowDoubleEscaping=\"true\" />"
                  - "\n"
                  - "\t\t\t</security>"
                  - "\n"
                  - "\t\t</system.webServer>"
                  - "\n"
                  - "\t</configuration>"
                  - "\n"
            C:\cfn\01-PrepareSubordinateCA.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\01-PrepareSubordinateCA.Transcript.log -Append
                  - "\n"
                  - Write-Output "SET STATIC IP"
                  - "\n"
                  - 'Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses '
                  - !Ref 'Parameter02eDNSServer01'
                  - ','
                  - !Ref 'Parameter02fDNSServer02'
                  - "\n"
                  - Set-DnsClient -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ConnectionSpecificSuffix "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList @("
                  - !Ref 'Parameter02cDNSDomainName'
                  - '")'
                  - "\n"
                  - Write-Output "INSTALL WINDOWS FEATURES"
                  - "\n"
                  - Install-WindowsFeature -Name Web-Server -IncludeManagementTools
                  - "\n"
                  - Install-WindowsFeature ADCS-Cert-Authority
                  - "\n"
                  - Install-Windowsfeature RSAT-AD-PowerShell
                  - "\n"
                  - Install-WindowsFeature RSAT-ADCS-Mgmt
                  - "\n"
                  - Install-WindowsFeature RSAT-ADDS-Tools
                  - "\n"
                  - "\n"
                  - Write-Output "SET GLOBAL SUFFIX"
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "RENAME COMPUTER"
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
            C:\cfn\02-AddToDomain.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\02-AddToDomain.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "ADD TO DOMAIN"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $OUPathMemberServers = "
                  - !Ref 'Parameter02gOUMemberServers'
                  - '"'
                  - "\n"
                  - Add-Computer -DomainName $domainname -OUPath $OUPathMemberServers -Restart -Credential $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03-InstallSubordinateCA.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\03-InstallSubordinateCA.Transcript.log -Append
                  - "\n"
                  - Write-Output "AUTHENTICATE"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL SUBORDINATE CA"
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $SubCADistinguishedName = "DC=" + $domainname -Replace "\.", ",DC="
                  - "\n"
                  - $SubCAType = "EnterpriseSubordinateCA"
                  - "\n"
                  - $SubCACommonName = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - '"'
                  - "\n"
                  - $SubCAKeyLength = "
                  - !Ref 'Parameter10cSubordinateCAKeyLength'
                  - '"'
                  - "\n"
                  - $SubCAHashAlgorithm = "
                  - !Ref 'Parameter10dSubordinateCAHash'
                  - '"'
                  - "\n"
                  - $SubCACryptoProvider = "RSA#Microsoft Software Key Storage Provider"
                  - "\n"
                  - "\n"
                  - >-
                    Install-AdcsCertificationAuthority -CAType $SubCAType -CACommonName $SubCACommonName -CADistinguishedNameSuffix $SubCADistinguishedName -CryptoProviderName $SubCACryptoProvider -HashAlgorithmName
                    $SubCAHashAlgorithm -KeyLength $SubCAKeyLength -Credential $credential -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CDP AND AIA ENDPOINT BASED ON IIS"
                  - "\n"
                  - Copy-Item C:\cfn\web.config C:\Windows\System32\CertSrv\CertEnroll\web.config
                  - "\n"
                  - New-WebSite -Name SubordinateCA -Port 80 -HostHeader "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '" -PhysicalPath C:\Windows\System32\CertSrv\CertEnroll'
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
            C:\cfn\04-ConfigSubCAPhase1.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\04-ConfigSubCAPhase1.Transcript.log -Append
                  - "\n"
                  - Write-Output "AUTHENTICATE"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $userRootCA = "Administrator"
                  - "\n"
                  - $credentialRootCA = New-Object System.Management.Automation.PSCredential($userRootCA,$administratorPWD)
                  - "\n"
                  - $RootCA = "
                  - !GetAtt 'Resource30RootCA.PrivateIp'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "ENABLE THE SUBORDINATE CA TO INVOKE COMMAND IN THE ROOT CA"
                  - "\n"
                  - Set-Item WSMan:\localhost\Client\TrustedHosts -Value "*" -Force
                  - "\n"
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $RootCAStatus = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - $RootCAStatus = (Invoke-Command -ComputerName $RootCA { (Get-Service | Where Name -EQ "CertSvc").Status } -Credential $credentialRootCA).Value
                  - "\n"
                  - If  ( $RootCAStatus -Match "Running" ){
                  - "\n"
                  - "\n"
                  - Write-Output "MAP NETWORK DRIVE TO ROOT CA"
                  - "\n"
                  - New-PSDrive -Name "Y" -PSProvider FileSystem -Root "\\$RootCA\c$" -Credential $credentialRootCA
                  - "\n"
                  - "\n"
                  - Write-Output "IMPORT THE ROOT CA CERTIFICATE AND REVOCATION LIST"
                  - "\n"
                  - Copy-Item "Y:\Windows\System32\CertSrv\CertEnroll\*" "C:\Windows\System32\CertSrv\CertEnroll\"
                  - "\n"
                  - certutil -addstore -f root c:\Windows\System32\CertSrv\CertEnroll\
                  - !Ref 'Parameter09aRootCAName'
                  - _
                  - !Ref 'Parameter09aRootCAName'
                  - .crt
                  - "\n"
                  - certutil -addstore -f root c:\Windows\System32\CertSrv\CertEnroll\
                  - !Ref 'Parameter09aRootCAName'
                  - .crl
                  - "\n"
                  - "\n"
                  - Write-Output "COPY THE CERTIFICATE REQUEST FROM SUBORDINATE CA TO THE ROOT CA"
                  - "\n"
                  - Copy-Item C:\
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - _
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .req Y:\cfn
                  - "\n"
                  - "\n"
                  - Write-Output "SUBMIT CERTIFICATE REQUEST TO THE ROOT CA"
                  - "\n"
                  - 'Invoke-Command -Computername $RootCA -ScriptBlock {certreq -config '
                  - !Ref 'Parameter09aRootCAName'
                  - \
                  - !Ref 'Parameter09aRootCAName'
                  - ' -submit C:\cfn\'
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - _
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .req
                  - ' C:\cfn\SubordinateCertificateIssued.cer} -Credential $credentialRootCA'
                  - "\n"
                  - Copy-Item Y:\cfn\SubordinateCertificateIssued.cer C:\cfn\SubordinateCertificateIssued.cer
                  - "\n"
                  - "\n"
                  - Write-Output "SET THE ROOT CA BACK TO MANUAL APPROVAL OF CERTIFICATE REQUESTS."
                  - "\n"
                  - Invoke-Command -Computername $RootCA -ScriptBlock {Set-ItemProperty 'HKLM:\\SYSTEM\CurrentControlSet\Services\CertSvc\Configuration\
                  - !Ref 'Parameter09aRootCAName'
                  - \PolicyModules\CertificateAuthority_MicrosoftDefault.Policy' -Name 'RequestDisposition' -Value 257; Restart-Service CertSvc} -Credential $credentialRootCA
                  - "\n"
                  - "\n"
                  - Write-Output "CONFIGURE CDP AND AIA"
                  - "\n"
                  - Add-CAAuthorityInformationAccess -AddToCertificateAia -uri "http://<ServerDNSName>/<ServerDNSName>_<CAName>.crt" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "http://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "ldap:///CN=<CATruncatedName>,CN=AIA,CN=Public Key Services,CN=Services,<ConfigurationContainer><CAObjectClass>" -Force
                  - "\n"
                  - Remove-CAAuthorityInformationAccess -uri "file://<ServerDNSName>/CertEnroll/<ServerDNSName>_<CAName><CertificateName>.crt" -Force
                  - "\n"
                  - "\n"
                  - Add-CACRLDistributionPoint -Uri "http://<ServerDNSName>/<CAName><DeltaCRLAllowed>.crl" -AddToCertificateCdp -AddToFreshestCrl -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "ldap:///CN=<CATruncatedName><CRLNameSuffix>,CN=<ServerShortName>,CN=CDP,CN=Public Key Services,CN=Services,<ConfigurationContainer><CDPObjectClass>"
                    -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "file://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - Remove-CACrlDistributionPoint -Uri "http://<ServerDNSName>/CertEnroll/<CAName><CRLNameSuffix><DeltaCRLAllowed>.crl" -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE SCHEDULED TASK ConfigSubCAPhase2"
                  - "\n"
                  - $taskSchedulerPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - $taskSchedulerUSR = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - "\n"
                  - $taskname = "ConfigSubCAPhase2"
                  - "\n"
                  - $taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command "& {C:\cfn\04-ConfigSubCAPhase2.ps1}"'
                  - "\n"
                  - $tasktrigger =  New-ScheduledTaskTrigger -AtStartup
                  - "\n"
                  - $taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable
                  - "\n"
                  - Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - Write-Output "Certificate Authority service is not running. Trying again in 30 seconds"
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - '}'
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource24DomainController01"
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack - Unable to connect to Root CA"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\04-ConfigSubCAPhase2.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\04-ConfigSubCAPhase2.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $DCConnectionStatus = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ( $DCConnectionStatus -eq "True"){
                  - "\n"
                  - Write-Output "CAPTURE DOMAIN DN"
                  - "\n"
                  - $domainDN = (get-addomain).distinguishedname
                  - "\n"
                  - "\n"
                  - Write-Output "PUBLISH THE ROOT CA CERTIFICATE IN THE DIRECTORY AND INSTALL THE SUBORDINATE CA CERTIFICATE. THIS WILL BE EXECUTED BY SCHEDULED TASK ONCE"
                  - "\n"
                  - certutil -dspublish -f c:\Windows\System32\CertSrv\CertEnroll\
                  - !Ref 'Parameter09aRootCAName'
                  - _
                  - !Ref 'Parameter09aRootCAName'
                  - .crt RootCA >> C:\cfn\CertUtil.txt
                  - "\n"
                  - certutil -installCert C:\cfn\SubordinateCertificateIssued.cer >> C:\cfn\CertUtil.txt
                  - "\n"
                  - "\n"
                  - Write-Output "DUMP DEFAULT TEMPLATES"
                  - "\n"
                  - ldifde -m -f C:\cfn\ExportComputerTemplate.ldf -d "CN=Machine,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" -p subtree
                  - "\n"
                  - ldifde -m -f C:\cfn\ExportUserTemplate.ldf -d "CN=User,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" -p subtree
                  - "\n"
                  - ldifde -m -f C:\cfn\ExportWebServerTemplate.ldf -d "CN=WebServer,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" -p subtree
                  - "\n"
                  - $TrustedComputer = Get-Content C:\cfn\ExportComputerTemplate.ldf -Raw
                  - "\n"
                  - $TrustedComputer = $TrustedComputer -Replace "Machine","TrustedMachine"
                  - "\n"
                  - $TrustedComputer = $TrustedComputer -Replace "Computer","TrustedComputer"
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "ImportTrustedComputerTemplate.ldf" -ItemType "File" -Value $TrustedComputer -Force
                  - "\n"
                  - ldifde -i -f C:\cfn\ImportTrustedComputerTemplate.ldf
                  - "\n"
                  - $TrustedUser = Get-Content C:\cfn\ExportUserTemplate.ldf -Raw
                  - "\n"
                  - $TrustedUser = $TrustedUser -Replace "CN=User","CN=TrustedUser"
                  - "\n"
                  - '$TrustedUser = $TrustedUser -Replace ": User",": TrustedUser"'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "ImportTrustedUserTemplate.ldf" -ItemType "File" -Value $TrustedUser -Force
                  - "\n"
                  - ldifde -i -f C:\cfn\ImportTrustedUserTemplate.ldf
                  - "\n"
                  - $TrustedWebServer = Get-Content C:\cfn\ExportWebServerTemplate.ldf -Raw
                  - "\n"
                  - $TrustedWebServer = $TrustedWebServer -Replace "CN=WebServer","CN=TrustedWebServer"
                  - "\n"
                  - '$TrustedWebServer = $TrustedWebServer -Replace ": WebServer",": TrustedWebServer"'
                  - "\n"
                  - '$TrustedWebServer = $TrustedWebServer -Replace ": Web Server",": TrustedWebServer"'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "ImportTrustedWebServerTemplate.ldf" -ItemType "File" -Value $TrustedWebServer -Force
                  - "\n"
                  - ldifde -i -f C:\cfn\ImportTrustedWebServerTemplate.ldf
                  - "\n"
                  - Write-Output "SET PERMISSIONS ON TEMPLATES FOR COMPUTERS USERS AND WEBSERVERS"
                  - "\n"
                  - dsacls "CN=TrustedMachine,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" /G "NT AUTHORITY\Authenticated Users:CA;Enroll" >> C:\cfn\dcacls.log
                  - "\n"
                  - dsacls "CN=TrustedUser,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" /G "NT AUTHORITY\Authenticated Users:CA;Enroll" >> C:\cfn\dcacls.log
                  - "\n"
                  - dsacls "CN=TrustedWebServer,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$domainDN" /G "NT AUTHORITY\Authenticated Users:CA;Enroll" >> C:\cfn\dcacls.log
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "04-ConfigSubCAPhase2.log" -ItemType "File" -Value "Script 04-ConfigSubCAPhase2.ps1 executed via Task Scheduler." -Force
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DNSClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\05-CheckTaskSchedulerLog.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CheckTaskLog = "False"
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CheckTaskLog = (Test-Path "C:\cfn\04-ConfigSubCAPhase2.log")
                  - "\n"
                  - If ( $CheckTaskLog -eq "True"){
                  - "\n"
                  - Unregister-ScheduledTask -TaskName "ConfigSubCAPhase2" -Confirm:$False
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If ($LoopCounterA -eq 20 ) {
                  - "\n"
                  - Write-Output "Waiting for 04-ConfigSubCAPhase2.log"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\06-SendCommand.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $LoopCounterB = 0
                  - "\n"
                  - $SubCAStatus = "Stopped"
                  - "\n"
                  - $TrustedTemplates = 0
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $SubCAStatus = (Get-Service | Where Name -EQ "CertSvc").Status
                  - "\n"
                  - If ( $SubCAStatus -eq "Running"){
                  - "\n"
                  - Do {
                  - "\n"
                  - $TrustedTemplates = (Get-CATemplate | Where Name -Match "Trusted*").Count
                  - "\n"
                  - If  ( $TrustedTemplates -lt 3 ){
                  - "\n"
                  - Write-Output "SEND SSM COMMAND"
                  - "\n"
                  - $InstanceID = (ConvertFrom-JSON (Invoke-WebRequest -Uri http://169.254.169.254/latest/dynamic/instance-identity/document -UseBasicparsing).Content).InstanceID
                  - "\n"
                  - $CommandString = 'Send-SSMCommand -DocumentName "AWS-RunPowerShellScript" -Parameter @{commands = "C:\\cfn\\07-AddCATemplates.ps1"} -Target @{Key="instanceids";Values=@("X-XXXXXXXXXX")}'
                  - "\n"
                  - $CommandString = $CommandString -replace "X-XXXXXXXXXX",$InstanceID
                  - "\n"
                  - Invoke-Expression $CommandString
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $LoopCounterA = 20
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - $LoopCounterB++
                  - "\n"
                  - Start-Sleep 120
                  - "\n"
                  - '} While ($LoopCounterB -lt 10)'
                  - "\n"
                  - '}'
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If ($LoopCounterB -eq 10){
                  - "\n"
                  - Write-Output "Unable to add CA Templates".
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($LoopCounterA -le 20 ) {
                  - "\n"
                  - Write-Output "Certificate Authority Service not running"
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '}'
                  - "\n"
                  - If ($LoopCounterA -gt 20 ) {
                  - "\n"
                  - Write-Output "Certificate Authority Templates added."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\07-AddCATemplates.ps1:
              content: !Join
                - ''
                - - Add-CATemplate -Name "TrustedMachine" -Force >> C:\cfn\TrustedMachine.Template.log
                  - "\n"
                  - Add-CATemplate -Name "TrustedUser" -Force >> C:\cfn\TrustedUser.Template.log
                  - "\n"
                  - Add-CATemplate -Name "TrustedWebServer" -Force >> C:\cfn\TrustedWebServer.Template.log
                  - "\n"
          commands:
            '01-PrepareSubordinateCA':
              command: Powershell.exe -Command C:\cfn\01-PrepareSubordinateCA.ps1
              waitAfterCompletion: forever
            '02-AddToDomain':
              command: Powershell.exe -Command C:\cfn\02-AddToDomain.ps1
              waitAfterCompletion: forever
            '03-InstallSubordinateCA':
              command: Powershell.exe -Command C:\cfn\03-InstallSubordinateCA.ps1
              waitAfterCompletion: forever
            '04-ConfigSubCAPhase1':
              command: Powershell.exe -Command C:\cfn\04-ConfigSubCAPhase1.ps1
              waitAfterCompletion: forever
            '05-CheckTaskSchedulerLog':
              command: Powershell.exe -Command C:\cfn\05-CheckTaskSchedulerLog.ps1
            '06-SendCommand':
              command: Powershell.exe -Command C:\cfn\06-SendCommand.ps1
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      InstanceType: !Ref 'Parameter04bInstanceType'
      IamInstanceProfile: !Ref 'InstanceProfileADFSandCA'
      SubnetId: !Ref 'Parameter03bSubnetCA'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      KeyName: !Ref 'Parameter04cKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter10aSubordinateCAName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource31SubCA '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource32ADFS:
    Type: AWS::EC2::Instance
    DependsOn: Resource31SubCA
    Condition: CreateADFS
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource32ADFS.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource32ADFS'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource32ADFS"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - $ADFSStackAccount = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - $"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - Write-Output "CHECKING INSTANCE HEALTH"
                  - "\n"
                  - $Failures = 0
                  - "\n"
                  - $ADFSSvcStatus = (Get-Service | Where Name -EQ "adfssrv").Status
                  - "\n"
                  - If  ( $ADFSSvcStatus -NotMatch "Running" ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - $ADFSSvcAccount = (Get-WmiObject Win32_Service | Where-Object Name -EQ "adfssrv").StartName
                  - "\n"
                  - If  ( $ADFSSvcAccount -NE $ADFSStackAccount ){
                  - "\n"
                  - $Failures++
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - If ($Failures -eq 0) {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 1 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Failure signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\01-PrepareADFS.ps1:
              content: !Join
                - ''
                - - Write-Output "SET STATIC IP"
                  - "\n"
                  - 'Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses '
                  - !Ref 'Parameter02eDNSServer01'
                  - ','
                  - !Ref 'Parameter02fDNSServer02'
                  - "\n"
                  - Set-DnsClient -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ConnectionSpecificSuffix "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList @("
                  - !Ref 'Parameter02cDNSDomainName'
                  - '")'
                  - "\n"
                  - Write-Output "INSTALL WINDOWS FEATURE"
                  - "\n"
                  - Install-WindowsFeature adfs-federation -IncludeManagementTools
                  - "\n"
                  - Install-WindowsFeature RSAT-AD-PowerShell
                  - "\n"
                  - Install-WindowsFeature RSAT-DNS-Server
                  - "\n"
                  - Install-WindowsFeature RSAT-ADDS-Tools
                  - "\n"
                  - Write-Output "SET WSMAN"
                  - "\n"
                  - Set-Item WSMan:\localhost\Client\TrustedHosts -Value "*" -Force
                  - "\n"
                  - "\n"
                  - Write-Output "SET GLOBAL SUFFIX"
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "RENAME COMPUTER"
                  - "\n"
                  - $newname = "
                  - !Ref 'Parameter12aADFSName'
                  - '".ToLower()'
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
            C:\cfn\02-AddToDomain.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "ADD TO DOMAIN"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $OUPathMemberServers = "
                  - !Ref 'Parameter02gOUMemberServers'
                  - '"'
                  - "\n"
                  - Add-Computer -DomainName $domainname -OUPath $OUPathMemberServers -Restart -Credential $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03a-CreateTask01.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\03a-CreateTask01.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "TASK 01 CUSTOMIZE AD"
                  - "\n"
                  - $taskSchedulerPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - $taskSchedulerUSR = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $taskname = "CustomizeAD01"
                  - "\n"
                  - $taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command "& {C:\cfn\03b-CustomizeDNS.ps1}"'
                  - "\n"
                  - $tasktrigger =  New-ScheduledTaskTrigger -AtStartup
                  - "\n"
                  - $taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable
                  - "\n"
                  - Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03b-CustomizeDNS.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\03b-CustomizeDNS.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DN = (Get-ADDomain).DistinguishedName
                  - "\n"
                  - $DomainNetBIOS = "
                  - !Ref 'Parameter02dNetBiosName'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE ADFS DNS RECORD"
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $SessionOption = New-CimSessionOption -Protocol DCOM
                  - "\n"
                  - $CimSe = New-CimSession -ComputerName $DomainControllers[0] -SessionOption $SessionOption -Credential $credential
                  - "\n"
                  - $CimSe
                  - "\n"
                  - $ADFSAddr = (Get-NetAdapter | Get-NetIPAddress -AddressFamily IPV4).IpAddress
                  - "\n"
                  - $ADFSName = "
                  - !Ref 'Parameter12bFederationServiceName'
                  - '".ToLower()'
                  - "\n"
                  - $ADFSZoneName = "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - Add-DnsServerResourceRecordA -Name $ADFSName -ZoneName $ADFSZoneName -AllowUpdateAny -IPv4Address $ADFSAddr -TimeToLive 01:00:00 -CimSession $CimSe -ErrorAction:Ignore
                  - "\n"
                  - Add-DnsServerResourceRecordA -Name $ADFSName -ZoneName $ADFSZoneName -AllowUpdateAny -IPv4Address $ADFSAddr -TimeToLive 01:00:00 -ComputerName $DomainControllers[0] -ErrorAction:Ignore
                  - "\n"
                  - New-Item -Path 'C:\cfn\03b-CustomizeDNS.log' -ItemType File
                  - "\n"
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03c-CheckTaskLog01.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CheckTaskLog = "False"
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CheckTaskLog = (Test-Path "C:\cfn\03b-CustomizeDNS.log")
                  - "\n"
                  - If ( $CheckTaskLog -eq "True"){
                  - "\n"
                  - Unregister-ScheduledTask -TaskName "CustomizeAD01" -Confirm:$False
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If ($LoopCounterA -eq 20 ) {
                  - "\n"
                  - Write-Output "Waiting for 03b-CustomizeDNS.log"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\04a-CreateTask02.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "CREDENTIALS"
                  - "\n"
                  - $taskSchedulerPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - $taskSchedulerUSR = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - Write-Output "CREATE ADFS SERVICE ACCOUNT"
                  - "\n"
                  - $taskname = "04b-ExecuteTasks"
                  - "\n"
                  - $taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command "& {C:\cfn\04b-ExecuteTasks.ps1}"'
                  - "\n"
                  - $tasktrigger =  New-ScheduledTaskTrigger -AtStartup
                  - "\n"
                  - $taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable
                  - "\n"
                  - Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\04b-ExecuteTasks.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\04b-ExecuteTasks.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE MANAGED SERVICE ACCOUNT FOR ADFS"
                  - "\n"
                  - $ADFSName = "
                  - !Ref 'Parameter12bFederationServiceName'
                  - '".ToLower()'
                  - "\n"
                  - $MsaAccount = "
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - '"'
                  - "\n"
                  - $MsaDNS = "
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $MsaPrincipalName = "http/
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - '$MsaSPNHost = "host/" + '
                  - $ADFSName
                  - ' + ".'
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $MsaSPNUsr = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - $"
                  - "\n"
                  - Add-KdsRootKey -EffectiveTime ((get-date).AddHours(-10))
                  - "\n"
                  - New-ADServiceAccount $MsaAccount -DNSHostName $MsaDNS -ServicePrincipalNames $MsaPrincipalName
                  - "\n"
                  - Setspn -s $MsaSPNHost $MsaSPNUsr
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE ADFS CONTAINER"
                  - "\n"
                  - $domain = (Get-ADDomain).DistinguishedName
                  - "\n"
                  - $ADFSGuid = ([guid]::NewGuid()).Guid
                  - "\n"
                  - '$ADFSContainer = "ADFS-" + -join ((65..90) + (97..122) | Get-Random -Count 5 | % {[char]$_}) '
                  - "\n"
                  - $DomainNetBIOS = "
                  - !Ref 'Parameter02dNetBiosName'
                  - '"'
                  - "\n"
                  - New-ADObject -Name "$ADFSContainer" -Type Container -Path "
                  - !Ref 'Parameter02iOUADFSContainer'
                  - '"'
                  - "\n"
                  - New-ADObject -Name "$ADFSGuid" -Type Container -Path "CN=$ADFSContainer,
                  - !Ref 'Parameter02iOUADFSContainer'
                  - '"'
                  - "\n"
                  - Write-Output "CREATE adminConfig LOG"
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "adminConfig.log" -ItemType "File" -Value "$ADFSContainer,$ADFSGuid" -Force
                  - "\n"
                  - "\n"
                  - Break
                  - "\n"
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\04c-CheckTaskLog02.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CheckTaskLog = "False"
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CheckTaskLog = (Test-Path "C:\cfn\adminConfig.log")
                  - "\n"
                  - If ( $CheckTaskLog -eq "True"){
                  - "\n"
                  - Unregister-ScheduledTask -TaskName "04b-ExecuteTasks" -Confirm:$False
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If ($LoopCounterA -eq 20 ) {
                  - "\n"
                  - Write-Output "Waiting for 04b-ExecuteTasks.log"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\05-InstallADFS.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\05-InstallADFS.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - $ADFSName = "
                  - !Ref 'Parameter12bFederationServiceName'
                  - '".ToLower()'
                  - "\n"
                  - $ADFSServiceName = $ADFSName + ".
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $ADFSSigning = $ADFSName + "-Signing"
                  - "\n"
                  - $ADFSDecrypting = $ADFSName + "-Decrypting"
                  - "\n"
                  - $ADFSComputerName = $env:computername.ToLower()
                  - "\n"
                  - '$URL = "https://" + '
                  - $ADFSName
                  - ' + ".'
                  - !Ref 'Parameter02cDNSDomainName'
                  - /federationmetadata/2007-06/federationmetadata.xml"
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CERTIFICATE REQUEST - ADFS SERVICE"
                  - "\n"
                  - $CertificateRequest = @"
                  - "\n"
                  - '[Version]'
                  - "\n"
                  - Signature="`$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Newrequest]'
                  - "\n"
                  - Subject = CN=$ADFSName
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - "\n"
                  - Exportable = true
                  - "\n"
                  - MachineKeySet = true
                  - "\n"
                  - "\n"
                  - '[Extensions]'
                  - "\n"
                  - 2.5.29.17 = "{text}"
                  - "\n"
                  - _continue_ = "dns=$ADFSComputerName
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '&"'
                  - "\n"
                  - _continue_ = "dns=enterpriseregistration.
                  - !Ref 'Parameter02cDNSDomainName'
                  - '&"'
                  - "\n"
                  - _continue_ = "dns=certauth.$ADFSName
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '&"'
                  - "\n"
                  - _continue_ = "dns=$ADFSName
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '&"'
                  - "\n"
                  - "\n"
                  - '[RequestAttributes]'
                  - "\n"
                  - CertificateTemplate = TrustedWebServer
                  - "\n"
                  - '"@'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CertificateRequestTemplate.inf" -ItemType "File" -Value $CertificateRequest -Force
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CERTIFICATE REQUEST - ADFS SIGNING"
                  - "\n"
                  - $CertificateRequestSigning = @"
                  - "\n"
                  - '[Version]'
                  - "\n"
                  - Signature="`$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Newrequest]'
                  - "\n"
                  - Subject = CN=$ADFSSigning
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - "\n"
                  - Exportable = true
                  - "\n"
                  - MachineKeySet = true
                  - "\n"
                  - "\n"
                  - '[Extensions]'
                  - "\n"
                  - 2.5.29.17 = "{text}"
                  - "\n"
                  - _continue_ = "dns=CN=$ADFSSigning
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '&"'
                  - "\n"
                  - "\n"
                  - '[RequestAttributes]'
                  - "\n"
                  - CertificateTemplate = TrustedWebServer
                  - "\n"
                  - '"@'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CertificateRequestTemplateSigning.inf" -ItemType "File" -Value $CertificateRequestSigning -Force
                  - "\n"
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE CERTIFICATE REQUEST - ADFS ENCRYPTION"
                  - "\n"
                  - $CertificateRequestDecrypting = @"
                  - "\n"
                  - '[Version]'
                  - "\n"
                  - Signature="`$Windows NT$"
                  - "\n"
                  - "\n"
                  - '[Newrequest]'
                  - "\n"
                  - Subject = CN=$ADFSDecrypting
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - "\n"
                  - Exportable = true
                  - "\n"
                  - MachineKeySet = true
                  - "\n"
                  - "\n"
                  - '[Extensions]'
                  - "\n"
                  - 2.5.29.17 = "{text}"
                  - "\n"
                  - _continue_ = "dns=CN=$ADFSDecrypting
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '&"'
                  - "\n"
                  - "\n"
                  - '[RequestAttributes]'
                  - "\n"
                  - CertificateTemplate = TrustedWebServer
                  - "\n"
                  - '"@'
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "CertificateRequestTemplateDecrypting.inf" -ItemType "File" -Value $CertificateRequestDecrypting -Force
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "AUTHENTICATE"
                  - "\n"
                  - $username = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $os = (Get-CimInstance Win32_OperatingSystem).Caption
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL ADFS CERTIFICATES"
                  - "\n"
                  - $SubordinateCA = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - \
                  - !Ref 'Parameter10aSubordinateCAName'
                  - '"'
                  - "\n"
                  - $SubCADNS = "
                  - !Ref 'Parameter10aSubordinateCAName'
                  - .
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $LoopCounterD = 0
                  - "\n"
                  - $CAConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CAConnection = (Test-NetConnection -ComputerName $SubCADNS -Port 135).TcpTestSucceeded
                  - "\n"
                  - If ($CAConnection -Match "True"){
                  - "\n"
                  - gpupdate /force
                  - "\n"
                  - certreq -new C:\cfn\CertificateRequestTemplate.inf C:\cfn\CertificateRequest.req
                  - "\n"
                  - $CertificateSubmit = (certreq -config $SubordinateCA -submit C:\cfn\CertificateRequest.req C:\cfn\CertificateIssued.cer)
                  - "\n"
                  - certreq -accept C:\cfn\CertificateIssued.cer >> C:\cfn\CertificateInstalled.log
                  - "\n"
                  - "\n"
                  - certreq -new C:\cfn\CertificateRequestTemplateSigning.inf C:\cfn\CertificateRequestSigning.req
                  - "\n"
                  - $CertificateSubmit = (certreq -config $SubordinateCA -submit C:\cfn\CertificateRequestSigning.req C:\cfn\CertificateIssuedSigning.cer)
                  - "\n"
                  - certreq -accept C:\cfn\CertificateIssuedSigning.cer >> C:\cfn\CertificateInstalledSigning.log
                  - "\n"
                  - "\n"
                  - certreq -new C:\cfn\CertificateRequestTemplateDecrypting.inf C:\cfn\CertificateRequestDecrypting.req
                  - "\n"
                  - $CertificateSubmit = (certreq -config $SubordinateCA -submit C:\cfn\CertificateRequestDecrypting.req C:\cfn\CertificateIssuedDecrypting.cer)
                  - "\n"
                  - certreq -accept C:\cfn\CertificateIssuedDecrypting.cer >> C:\cfn\CertificateInstalledDecrypting.log
                  - "\n"
                  - "\n"
                  - $ADFSServiceCert = (Get-ChildItem -path cert:\LocalMachine\My | Where-Object Subject -Match $ADFSServiceName).Thumbprint
                  - "\n"
                  - $ADFSDecryptingCert = (Get-ChildItem -path cert:\LocalMachine\My | Where-Object Subject -Match "-Decrypting").Thumbprint
                  - "\n"
                  - $ADFSSigningCert = (Get-ChildItem -path cert:\LocalMachine\My | Where-Object Subject -Match "-Signing").Thumbprint
                  - "\n"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Resolve-DNSName -Name $SubCADNS
                  - "\n"
                  - $LoopCounterD++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterD -lt 20)'
                  - "\n"
                  - "\n"
                  - Write-Output "INSTALL ADFS"
                  - "\n"
                  - $LoopCounterC = 0
                  - "\n"
                  - $ADFSAccountStatus = "False"
                  - "\n"
                  - $MsaAccount = "
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - '"'
                  - "\n"
                  - Do {
                  - "\n"
                  - $ADFSAccountStatus = (Get-ADServiceAccount -Identity $MsaAccount -Credential $credential).Enabled
                  - "\n"
                  - If ($ADFSAccountStatus -Match "True"){
                  - "\n"
                  - $ADFSThumbprint = (Get-ChildItem -Path Cert:\LocalMachine\My).Thumbprint
                  - "\n"
                  - '$ADFSServiceName = '
                  - $ADFSName
                  - ' + ".'
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $ADFSDisplayName = "
                  - !Ref 'Parameter02dNetBiosName'
                  - ' ADFS"'
                  - "\n"
                  - $ADFSServiceAccount = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter12dADFSServiceAccount'
                  - $"
                  - "\n"
                  - $domain = (Get-ADDomain).DistinguishedName
                  - "\n"
                  - $DomainNetBIOS = "
                  - !Ref 'Parameter02dNetBiosName'
                  - '"'
                  - "\n"
                  - $OUPathADFSObjects = "
                  - !Ref 'Parameter02iOUADFSContainer'
                  - '"'
                  - "\n"
                  - $ADFSParams = Get-Content C:\cfn\adminConfig.log
                  - "\n"
                  - $ParentOU = ($ADFSParams -split ",")[0]
                  - "\n"
                  - $ChildOU = ($ADFSParams -split ",")[1]
                  - "\n"
                  - $adminConfig = @{"DKMContainerDn"="CN=$ChildOU,CN=$ParentOU,$OUPathADFSObjects"}
                  - "\n"
                  - >-
                    Install-ADFSFarm -CertificateThumbprint $ADFSServiceCert -FederationServiceName $ADFSServiceName -GroupServiceAccountIdentifier $ADFSServiceAccount -FederationServiceDisplayName $ADFSDisplayName
                    -Credential $credential -OverwriteConfiguration -AdminConfiguration $AdminConfig -SigningCertificateThumbprint $ADFSSigningCert -DecryptionCertificateThumbprint $ADFSDecryptingCert
                  - "\n"
                  - Write-Output "INITIATE SIGNON PAGE AND ENABLE RELAY STATE"
                  - "\n"
                  - If ($os -NotMatch "Microsoft Windows Server 2012"){
                  - "\n"
                  - Set-AdfsProperties -EnableIdPInitiatedSignonPage $true
                  - "\n"
                  - Set-AdfsProperties -EnableRelayStateForIdpInitiatedSignOn $true
                  - "\n"
                  - '}'
                  - "\n"
                  - Else {
                  - "\n"
                  - $ADFSConfigFile = "C:\Windows\ADFS\Microsoft.IdentityServer.Servicehost.exe.config"
                  - "\n"
                  - $RelayStateString = @"
                  - "\n"
                  - <microsoft.identityServer.web>`r
                  - "\n"
                  - '    <useRelayStateForIdpInitiatedSignOn enabled="true" />'
                  - "\n"
                  - '"@'
                  - "\n"
                  - $ADFSConfigFileContent = (Get-Item -Path $ADFSConfigFile | Get-Content -Raw)
                  - "\n"
                  - $ADFSNEWConfigFileContent = $ADFSConfigFileContent -Replace "<microsoft.identityServer.web>",$RelayStateString
                  - "\n"
                  - Rename-Item -Path $ADFSConfigFile -NewName "Microsoft.IdentityServer.Servicehost.exe.config.BKP.CFN"
                  - "\n"
                  - New-Item -ItemType "File" -Path $ADFSConfigFile -Value $ADFSNEWConfigFileContent -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - Restart-Service adfssrv
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterC++
                  - "\n"
                  - '} While ($LoopCounterC -lt 20)'
                  - "\n"
                  - "\n"
                  - $LoopCounterB = 0
                  - "\n"
                  - Do {
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Resolve-DNSName -Name "$ADFSName.
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $ADFSStatus = (Invoke-WebRequest -URI $URL -UseBasicParsing -Credential $credential).StatusCode
                  - "\n"
                  - If ($ADFSStatus -Match "200"){
                  - "\n"
                  - Write-Output "CREATE RELYING PART TRUST"
                  - "\n"
                  - $RelyingPartyTrust = "Amazon Web Services"
                  - "\n"
                  - Add-ADFSRelyingPartyTrust -Name $RelyingPartyTrust -MetadataURL "https://signin.aws.amazon.com/static/saml-metadata.xml" -MonitoringEnabled:$true -AutoUpdateEnabled:$true
                  - "\n"
                  - if ($os -NotMatch "Microsoft Windows Server 2012") {Set-AdfsRelyingPartyTrust -TargetName $RelyingPartyTrust -AccessControlPolicyName "Permit Everyone"}
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE IAM IDP PROVIDER"
                  - "\n"
                  - $SAMLProviderName = "
                  - !Ref 'AWS::StackName'
                  - -ADFS-
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $SAMLMetaDataDoc = (Invoke-WebRequest -URI $URL -UseBasicParsing -Credential $credential).Content
                  - "\n"
                  - New-Item -Path "C:\cfn" -Name "federationmetadata.xml.log" -ItemType "File" -Value $SAMLMetaDataDoc -Force
                  - "\n"
                  - $IDPArn = (New-IAMSAMLProvider -Name $SAMLProviderName -SAMLMetadataDocument $SAMLMetaDataDoc -Select *).SAMLProviderArn
                  - "\n"
                  - "\n"
                  - Write-Output "CONFIGURE TRUSTED POLICY FOR ADMINISTRATIVE ACCESS ROLE VIA ADFS"
                  - "\n"
                  - $TrustPolicyTemplate = @"
                  - "\n"
                  - '{'
                  - "\n"
                  - '"Version": "2012-10-17",'
                  - "\n"
                  - '"Statement": ['
                  - "\n"
                  - '{'
                  - "\n"
                  - '"Effect": "Allow",'
                  - "\n"
                  - '"Principal": {'
                  - "\n"
                  - '"Federated": "REPLACE-IDP-ARN"'
                  - "\n"
                  - '},'
                  - "\n"
                  - '"Action": "sts:AssumeRoleWithSAML",'
                  - "\n"
                  - '"Condition": {'
                  - "\n"
                  - '"StringEquals": {'
                  - "\n"
                  - '"SAML:aud": "https://signin.aws.amazon.com/saml"'
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - '}'
                  - "\n"
                  - ']'
                  - "\n"
                  - '}'
                  - "\n"
                  - '"@'
                  - "\n"
                  - "\n"
                  - $TrustPolicy = $TrustPolicyTemplate -replace "REPLACE-IDP-ARN",$IDPArn
                  - "\n"
                  - 'Update-IAMAssumeRolePolicy -RoleName '
                  - !Ref 'RoleADFSAdminAccess'
                  - ' -PolicyDocument $TrustPolicy'
                  - "\n"
                  - 'Update-IAMAssumeRolePolicy -RoleName '
                  - !Ref 'RoleADFSAppStream'
                  - ' -PolicyDocument $TrustPolicy'
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE ADFS RULES"
                  - "\n"
                  - $IDPArnForRules = $IDPArn -replace '
                  - !Ref 'AWS::AccountId'
                  - ''',''$1'''
                  - "\n"
                  - $TemporaryRules = @'
                  - "\n"
                  - '@RuleTemplate = "MapClaims"'
                  - "\n"
                  - '@RuleName = "Name ID"'
                  - "\n"
                  - >-
                    c:[Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname"] => issue(Type = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", Issuer
                    = c.Issuer, OriginalIssuer = c.OriginalIssuer, Value = c.Value, ValueType = c.ValueType, Properties["http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format"] = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent");
                  - "\n"
                  - "\n"
                  - '@RuleTemplate = "LdapClaims"'
                  - "\n"
                  - '@RuleName = "Session Name"'
                  - "\n"
                  - >-
                    c:[Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname", Issuer == "AD AUTHORITY"] => issue(store = "Active Directory", types = ("https://aws.amazon.com/SAML/Attributes/RoleSessionName"),
                    query = ";userPrincipalName;{0}", param = c.Value);
                  - "\n"
                  - "\n"
                  - '@RuleName = "Get AD Groups"'
                  - "\n"
                  - >-
                    c:[Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccountname", Issuer == "AD AUTHORITY"] => add(store = "Active Directory", types = ("http://temp/variable"),
                    query = ";tokenGroups;{0}", param = c.Value);
                  - "\n"
                  - "\n"
                  - '@RuleName = "Roles"'
                  - "\n"
                  - >-
                    c:[Type == "http://temp/variable", Value =~ "(?i)^AWS-([^d]{12})"] => issue(Type = "https://aws.amazon.com/SAML/Attributes/Role", Value = RegExReplace(c.Value, "AWS-([^d]{12})-", "REPLACE-IDP-ARN-FOR-RULES,arn:aws:iam::$1:role/"));
                  - "\n"
                  - '''@'
                  - "\n"
                  - "\n"
                  - $Rules = $TemporaryRules -replace "REPLACE-IDP-ARN-FOR-RULES",$IDPArnForRules
                  - "\n"
                  - Set-ADFSRelyingPartyTrust -TargetName $RelyingPartyTrust -IssuanceTransformRules $Rules
                  - "\n"
                  - if ($os -Match "Microsoft Windows Server 2012") {
                  - "\n"
                  - $AuthotizationRulesW12 = @'
                  - "\n"
                  - '@RuleName = "Permit Access to All Users"'
                  - "\n"
                  - => issue(Type = "http://schemas.microsoft.com/authorization/claims/permit", Value = "true");
                  - "\n"
                  - '''@'
                  - "\n"
                  - Set-AdfsRelyingPartyTrust -TargetName $RelyingPartyTrust -IssuanceAuthorizationRules $AuthotizationRulesW12
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "ADD ADMINISTRATOR TO AD GROUP MAPPING TO THE IAM ROLE VIA FEDERATION"
                  - "\n"
                  - $ResourcesOU = "OU=
                  - !Ref 'Parameter02dNetBiosName'
                  - '," + $domain'
                  - "\n"
                  - $GroupsOU = "OU=Groups," + $ResourcesOU
                  - "\n"
                  - $ADgroupName = "AWS-
                  - !Ref 'AWS::AccountId'
                  - '-'
                  - !Ref 'RoleADFSAdminAccess'
                  - '"'
                  - "\n"
                  - $DomainAdminUSR = "
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - Set-ADUser -Identity $DomainAdminUSR -UserPrincipalName $DomainAdminUSR@
                  - !Ref 'Parameter02cDNSDomainName'
                  - ' -Credential $credential'
                  - "\n"
                  - >-
                    New-ADGroup -Name $ADgroupName -SamAccountName $ADgroupName -GroupCategory Security -GroupScope Global -Path $OUPathADFSObjects -Description "Allow Administrative access to AWS via ADFS"
                    -Credential $credential
                  - "\n"
                  - Add-ADGroupMember -Identity $ADGroupName -Members $DomainAdminUSR -Credential $credential
                  - "\n"
                  - $ADgroupName = "AWS-
                  - !Ref 'AWS::AccountId'
                  - '-'
                  - !Ref 'RoleADFSAppStream'
                  - '"'
                  - "\n"
                  - >-
                    New-ADGroup -Name $ADgroupName -SamAccountName $ADgroupName -GroupCategory Security -GroupScope Global -Path $OUPathADFSObjects -Description "Allow users to connnect to AppStream instances
                    via ADFS" -Credential $credential
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - $LoopCounterB++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterB -lt 20)'
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
          commands:
            '01-PrepareADFS':
              command: Powershell.exe -Command C:\cfn\01-PrepareADFS.ps1
              waitAfterCompletion: forever
            '02-AddToDomain':
              command: Powershell.exe -Command C:\cfn\02-AddToDomain.ps1
              waitAfterCompletion: forever
            '03a-CreateTask01':
              command: Powershell.exe -Command C:\cfn\03a-CreateTask01.ps1
              waitAfterCompletion: forever
            '03c-CheckTaskLog01':
              command: Powershell.exe -Command C:\cfn\03c-CheckTaskLog01.ps1
              waitAfterCompletion: forever
            '04a-CreateTask02':
              command: Powershell.exe -Command C:\cfn\04a-CreateTask02.ps1
              waitAfterCompletion: forever
            '04c-CheckTaskLog02':
              command: Powershell.exe -Command C:\cfn\04c-CheckTaskLog02.ps1
              waitAfterCompletion: forever
            '05-InstallADFS':
              command: Powershell.exe -Command C:\cfn\05-InstallADFS.ps1
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      SubnetId: !Ref 'Parameter03dSubnetADFS'
      IamInstanceProfile: !Ref 'InstanceProfileADFSandCA'
      KeyName: !Ref 'Parameter04cKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter12aADFSName'
      SecurityGroupIds: !If
        - ADFSType
        - - !Ref 'Resource23bSecurityGroupPrivateNetwork'
        - - !Ref 'Resource23bSecurityGroupPrivateNetwork'
          - !Ref 'Resource23cSecurityInboundHTTP'
      InstanceType: !Ref 'Parameter04bInstanceType'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource32ADFS '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource11bEIPADFS:
    Condition: ADFSElasticIP
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .EIP.ADFS
  Resource11cEIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Condition: ADFSElasticIP
    Properties:
      AllocationId: !GetAtt 'Resource11bEIPADFS.AllocationId'
      InstanceId: !Ref 'Resource32ADFS'
  Resource36bADFSRecord:
    DependsOn: Resource11cEIPAssoc
    Condition: UpdateR53
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'Parameter12fHostZoneID'
      Name: !Join
        - ''
        - - !Ref 'Parameter12bFederationServiceName'
          - .
          - !Ref 'Parameter02cDNSDomainName'
      ResourceRecords:
        - !GetAtt 'Resource32ADFS.PublicIp'
      TTL: '300'
      Type: A
  Resource27HelperInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Join
                - ''
                - - "[main]\n"
                  - stack=
                  - !Ref 'AWS::StackId'
                  - "\n"
                  - region=
                  - !Ref 'AWS::Region'
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.Resource27HelperInstance.Metadata.AWS::CloudFormation::Init\n"
                  - 'action=cfn-init.exe -v -s '
                  - !Ref 'AWS::StackId'
                  - ' -r Resource27HelperInstance'
                  - ' --region '
                  - !Ref 'AWS::Region'
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: "%~1\nIF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )"
            c:\cfn\99-Signaling.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CFNRegion = "
                  - !Ref 'AWS::Region'
                  - '"'
                  - "\n"
                  - $CFNEndpoint = "cloudformation." + $CFNRegion + ".amazonaws.com"
                  - "\n"
                  - $CFNStack =  "
                  - !Ref 'AWS::StackName'
                  - '"'
                  - "\n"
                  - $CFNResource =  "Resource27HelperInstance"
                  - "\n"
                  - $CFNConnectionStatus = "False"
                  - "\n"
                  - "\n"
                  - Write-Output "SEND SIGNALING"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CFNConnectionStatus =(Test-NetConnection -ComputerName $CFNendpoint -Port 443).TcpTestSucceeded
                  - "\n"
                  - If  ( $CFNConnectionStatus -Match "True" ){
                  - "\n"
                  - $CFNSendSignaling = (cfn-signal.exe -e 0 --stack $CFNStack --resource $CFNResource --region $CFNRegion)
                  - "\n"
                  - Write-Output "Success signaling sent to stack $CFNStack"
                  - "\n"
                  - Break
                  - "\n"
                  - '}'
                  - "\n"
                  - Write-Output "Trying to connect to CloudFormation Endpoint."
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to CloudFormation Endpoint."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
                  - "\n"
                  - "\n"
                  - Start-Sleep 60
                  - "\n"
                  - Stop-Computer -Force
                  - "\n"
                  - "\n"
            C:\cfn\01-PrepareInstance01.ps1:
              content: !Join
                - ''
                - - Write-Output "INSTALL WINDOWS FEATURE"
                  - "\n"
                  - Install-WindowsFeature RSAT-Role-Tools,GPMC,RSAT-DNS-Server
                  - "\n"
                  - "\n"
                  - Write-Output "SET GLOBAL SUFFIX"
                  - "\n"
                  - Set-DnsClientGlobalSetting -SuffixSearchList "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - "\n"
                  - Write-Output "RENAME COMPUTER"
                  - "\n"
                  - $newname = "AWSHLPR" + (Get-Random -Maximum 999)
                  - "\n"
                  - Rename-Computer -NewName $newname -PassThru
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
            C:\cfn\02-AddToDomain.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $domainNetBiosName = "
                  - !Ref 'Parameter02dNetBiosName'
                  - '"'
                  - "\n"
                  - $AdministratorAccount = "
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "ADD TO DOMAIN"
                  - "\n"
                  - $username = $domainNetBiosName  + "\" + $AdministratorAccount
                  - "\n"
                  - $administratorPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $credential = New-Object System.Management.Automation.PSCredential($username,$administratorPWD)
                  - "\n"
                  - $domainname = "
                  - !Ref 'Parameter02cDNSDomainName'
                  - '"'
                  - "\n"
                  - $OUPathMemberServers = "
                  - !Ref 'Parameter02gOUMemberServers'
                  - '"'
                  - "\n"
                  - Add-Computer -DomainName $domainname -OUPath $OUPathMemberServers -Restart -Credential $credential
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - If  ( $LoopCounterA -eq 20 ){
                  - "\n"
                  - Write-Output "Unable to connect to Domain Controller DNS Service."
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03a-CreateTask01.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\03a-CreateTask01.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - Write-Output "TASK 01 CUSTOMIZE AD"
                  - "\n"
                  - $taskSchedulerPWD = ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordDomainAdministrator'
                  - '").SecretString | ConvertFrom-Json).Password'
                  - "\n"
                  - $taskSchedulerUSR = "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter02aAdministrator'
                  - '"'
                  - "\n"
                  - "\n"
                  - $taskname = "CustomizeAD01"
                  - "\n"
                  - $taskaction = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command "& {C:\cfn\03b-CustomizeAD01.ps1}"'
                  - "\n"
                  - $tasktrigger =  New-ScheduledTaskTrigger -AtStartup
                  - "\n"
                  - $taskcondition = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable
                  - "\n"
                  - Register-ScheduledTask -Action $taskaction -Trigger $tasktrigger -TaskName $taskName -Settings $taskcondition -User $taskSchedulerUSR -Password $taskSchedulerPWD -RunLevel Highest
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03b-CustomizeAD01.ps1:
              content: !Join
                - ''
                - - Start-Transcript -Path C:\cfn\03b-CustomizeAD01.Transcript.log -Append
                  - "\n"
                  - $LoopCounterA = 0
                  - "\n"
                  - $DomainControllers = (Get-NetAdapter | Get-DNSClientServerAddress).ServerAddresses
                  - "\n"
                  - $DN = (Get-ADDomain).DistinguishedName
                  - "\n"
                  - $DomainNetBIOS = "
                  - !Ref 'Parameter02dNetBiosName'
                  - '"'
                  - "\n"
                  - $ObjectsOU = "
                  - !Ref 'Parameter02iOUADFSContainer'
                  - '"'
                  - "\n"
                  - $DCConnection = "False"
                  - "\n"
                  - $CustomizeAD = "
                  - !Ref 'Parameter07aAutomatedDelegation'
                  - '"'
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - "\n"
                  - $DCConnection = (Test-NetConnection -ComputerName $DomainControllers[0] -Port 53).TcpTestSucceeded
                  - "\n"
                  - If ($DCConnection -Match "True"){
                  - "\n"
                  - If ($CustomizeAD -Match "YES"){
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE APPSTREAM SERVICE ACCOUNT AND DELEGATE PERMISSIONS"
                  - "\n"
                  - $AppStreamOU = "
                  - !Ref 'Parameter02jOUAppStream'
                  - '"'
                  - "\n"
                  - $AppStreamServiceUSR = "
                  - !Ref 'Parameter07cAppStreamSvcAccount'
                  - '"'
                  - "\n"
                  - $ADAppStreamPWD =  ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordSVCAppStream'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - $ADgroupAppStream = "
                  - !Ref 'Parameter07bAppStreamGroup'
                  - '"'
                  - "\n"
                  - >-
                    New-ADGroup -Name $ADgroupAppStream -SamAccountName $ADgroupAppStream -GroupCategory Security -GroupScope Global -Path $ObjectsOU -Description "Allow AppStream to create computer accounts
                    in OU AWS-AppStream"
                  - "\n"
                  - New-ADUser $AppStreamServiceUSR -PasswordNeverExpires $True -Enabled $True -CannotChangePassword $True -AccountPassword $ADAppStreamPWD -Path $ObjectsOU
                  - "\n"
                  - Add-ADGroupMember -Identity $ADgroupAppStream -Members $AppStreamServiceUSR
                  - "\n"
                  - dsacls $AppStreamOU /I:T /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07bAppStreamGroup'
                  - :CC;Computer"
                  - "\n"
                  - dsacls $AppStreamOU /I:S /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07bAppStreamGroup'
                  - :RPWPLC;;Computer"
                  - "\n"
                  - dsacls $AppStreamOU /I:S /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07bAppStreamGroup'
                  - :CA;Reset Password;Computer"
                  - "\n"
                  - dsacls $AppStreamOU /I:S /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07bAppStreamGroup'
                  - :CA;Change Password;Computer"
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE FSx SERVICE ACCOUNT AND DELEGATE PERMISSIONS"
                  - "\n"
                  - $FSxOU = "
                  - !Ref 'Parameter02lOUFSx'
                  - '"'
                  - "\n"
                  - $FSxServiceUSR = "
                  - !Ref 'Parameter07eFSxSvcAccount'
                  - '"'
                  - "\n"
                  - $FSxGroup = "
                  - !Ref 'Parameter07dFSxGroup'
                  - '"'
                  - "\n"
                  - $FSxPWD =  ((Get-SECSecretValue -SecretId "
                  - !Ref 'PasswordSVCFSx'
                  - '").SecretString | ConvertFrom-Json).Password | ConvertTo-SecureString -asPlainText -Force'
                  - "\n"
                  - New-ADGroup -Name $FSxGroup -SamAccountName $FSxGroup -GroupCategory Security -GroupScope Global -Path $ObjectsOU -Description "Allow FSx to create computer accounts in OU AWS-FSx"
                  - "\n"
                  - New-ADUser $FSxServiceUSR -PasswordNeverExpires $True -Enabled $True -CannotChangePassword $True -AccountPassword $FSxPWD -Path $ObjectsOU
                  - "\n"
                  - Add-ADGroupMember -Identity $FSxGroup -Members $FSxServiceUSR
                  - "\n"
                  - "\n"
                  - dsacls $FSxOU /I:T /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07dFSxGroup'
                  - :CCDC;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07dFSxGroup'
                  - :CA;Reset Password;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07dFSxGroup'
                  - :WS;Validated write to service principal name;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07dFSxGroup'
                  - :WS;Validated write to DNS host name;Computer"
                  - "\n"
                  - dsacls $FSxOU /I:S /G "
                  - !Ref 'Parameter02dNetBiosName'
                  - \
                  - !Ref 'Parameter07dFSxGroup'
                  - :RPWP;Account Restrictions;Computer"
                  - "\n"
                  - '}'
                  - "\n"
                  - "\n"
                  - Write-Output "CREATE LOG 03b-CustomizeAD01.log"
                  - "\n"
                  - New-Item -Path 'C:\cfn\03b-CustomizeAD01.log' -ItemType File
                  - "\n"
                  - Break
                  - "\n"
                  - "\n"
                  - '}'
                  - "\n"
                  - Clear-DnsClientCache
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
            C:\cfn\03c-CheckTaskLog01.ps1:
              content: !Join
                - ''
                - - $LoopCounterA = 0
                  - "\n"
                  - $CheckTaskLog = "False"
                  - "\n"
                  - "\n"
                  - Do {
                  - "\n"
                  - $CheckTaskLog = (Test-Path "C:\cfn\03b-CustomizeAD01.log")
                  - "\n"
                  - If ( $CheckTaskLog -eq "True"){
                  - "\n"
                  - Unregister-ScheduledTask -TaskName "CustomizeAD01" -Confirm:$False
                  - "\n"
                  - Restart-Computer -Force
                  - "\n"
                  - '}'
                  - "\n"
                  - Start-Sleep 30
                  - "\n"
                  - $LoopCounterA++
                  - "\n"
                  - If ($LoopCounterA -eq 20 ) {
                  - "\n"
                  - Write-Output "Waiting for 03b-CustomizeAD01.log"
                  - "\n"
                  - '}'
                  - "\n"
                  - '} While ($LoopCounterA -lt 20)'
                  - "\n"
          commands:
            '01-PrepareInstance01':
              command: Powershell.exe -Command C:\cfn\01-PrepareInstance01.ps1
              waitAfterCompletion: forever
            '02-AddToDomain':
              command: Powershell.exe -Command C:\cfn\02-AddToDomain.ps1
              waitAfterCompletion: forever
            '03a-CreateTask01':
              command: Powershell.exe -Command C:\cfn\03a-CreateTask01.ps1
              waitAfterCompletion: forever
            '03c-CheckTaskLog01':
              command: Powershell.exe -Command C:\cfn\03c-CheckTaskLog01.ps1
              waitAfterCompletion: forever
            99-Signaling:
              command: Powershell.exe -Command c:\cfn\99-Signaling.ps1
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref 'Parameter04aInstanceAMI'
      SubnetId: !Ref 'Parameter03cHelper'
      IamInstanceProfile: !Ref 'InstanceProfileADFSandCA'
      KeyName: !Ref 'Parameter04cKeyPair'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .Helper
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      InstanceType: !Ref 'Parameter04bInstanceType'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - !Ref 'AWS::StackId'
            - ' -r Resource27HelperInstance '
            - ' --region '
            - !Ref 'AWS::Region'
            - "\n"
            - </script>
  Resource34AppSDirectoryConfig:
    Condition: CreateAppStream
    DependsOn: Resource27HelperInstance
    Type: AWS::AppStream::DirectoryConfig
    Properties:
      DirectoryName: !Ref 'Parameter02cDNSDomainName'
      OrganizationalUnitDistinguishedNames:
        - !Ref 'Parameter02jOUAppStream'
      ServiceAccountCredentials:
        AccountName: !Join
          - ''
          - - !Ref 'Parameter02dNetBiosName'
            - \
            - !If
              - ADAutomatedDelegation
              - !Ref 'Parameter07cAppStreamSvcAccount'
              - !Ref 'Parameter02aAdministrator'
        AccountPassword: !If
          - ADAutomatedDelegation
          - !Ref 'Parameter07fAppStreamPass'
          - !Ref 'Parameter02bAdministratorPassword'
  Resource35AppSStack01:
    DependsOn: Resource34AppSDirectoryConfig
    Condition: CreateAppStream
    Type: AWS::AppStream::Stack
    Properties:
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .AppStreamStack
      ApplicationSettings:
        Enabled: !Ref 'Parameter20hStackPersistentSettings'
        SettingsGroup: !Join
          - ''
          - - !Ref 'AWS::StackName'
            - .SettingsGroup
      StorageConnectors:
        - ConnectorType: HOMEFOLDERS
      UserSettings:
        - Action: CLIPBOARD_COPY_FROM_LOCAL_DEVICE
          Permission: ENABLED
        - Action: CLIPBOARD_COPY_TO_LOCAL_DEVICE
          Permission: ENABLED
        - Action: FILE_DOWNLOAD
          Permission: ENABLED
        - Action: FILE_UPLOAD
          Permission: ENABLED
        - Action: PRINTING_TO_LOCAL_DEVICE
          Permission: ENABLED
  Resource36AppSFleet01:
    DependsOn: Resource35AppSStack01
    Condition: CreateAppStream
    Type: AWS::AppStream::Fleet
    Properties:
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .AppStreamFleet
      DisplayName: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - .AppStreamFleet
      DomainJoinInfo:
        DirectoryName: !Ref 'Parameter02cDNSDomainName'
        OrganizationalUnitDistinguishedName: !Ref 'Parameter02jOUAppStream'
      ImageName: !Ref 'Parameter20aAppStreamImage'
      InstanceType: !Ref 'Parameter20bAppStreamInstanceType'
      FleetType: !Ref 'Parameter20cAppStreamFleetType'
      ComputeCapacity:
        DesiredInstances: !Ref 'Parameter20fAppStreamCapacity'
      VpcConfig:
        SubnetIds:
          - !Select
            - '0'
            - !Ref 'Parameter03fSubnetAppStream'
          - !Select
            - '1'
            - !Ref 'Parameter03fSubnetAppStream'
        SecurityGroupIds:
          - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      StreamView: !Ref 'Parameter20dFleetStreamView'
      MaxUserDurationInSeconds: '57600'
      DisconnectTimeoutInSeconds: '900'
      IdleDisconnectTimeoutInSeconds: '900'
      EnableDefaultInternetAccess: !If
        - AppStreamNetwork
        - false
        - true
    CreationPolicy:
      StartFleet: !Ref 'Parameter20gAppSFleetStart'
  Resource37StackFleetAssociation:
    Condition: CreateAppStream
    Type: AWS::AppStream::StackFleetAssociation
    Properties:
      FleetName: !Ref 'Resource36AppSFleet01'
      StackName: !Ref 'Resource35AppSStack01'
    DependsOn:
      - Resource36AppSFleet01
      - Resource35AppSStack01
  Resource12FSx01:
    Type: AWS::FSx::FileSystem
    Condition: CreateFSx
    DependsOn: Resource27HelperInstance
    Properties:
      FileSystemType: WINDOWS
      StorageCapacity: !Ref 'Parameter21bStorageCapacity'
      StorageType: !Ref 'Parameter21cStorageType'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - .
              - !Ref 'Parameter21eTagName'
      SubnetIds: !If
        - FSxMultiAZ
        - - !Select
            - '0'
            - !Ref 'Parameter03gSubnetFSx'
          - !Select
            - '1'
            - !Ref 'Parameter03gSubnetFSx'
        - - !Select
            - '0'
            - !Ref 'Parameter03gSubnetFSx'
      SecurityGroupIds:
        - !Ref 'Resource23bSecurityGroupPrivateNetwork'
      WindowsConfiguration:
        ThroughputCapacity: !Ref 'Parameter21dThroughput'
        DeploymentType: !Ref 'Parameter21aDeployType'
        PreferredSubnetId: !If
          - FSxMultiAZ
          - !Select
            - '0'
            - !Ref 'Parameter03gSubnetFSx'
          - !Ref 'AWS::NoValue'
        ActiveDirectoryId: !If
          - FSxDirectoryType
          - !Ref 'Parameter21gDirectoryID'
          - !Ref 'AWS::NoValue'
        SelfManagedActiveDirectoryConfiguration: !If
          - FSxDirectoryType
          - !Ref 'AWS::NoValue'
          - DnsIps:
              - !Ref 'Parameter02eDNSServer01'
              - !Ref 'Parameter02fDNSServer02'
            DomainName: !Ref 'Parameter02cDNSDomainName'
            OrganizationalUnitDistinguishedName: !Ref 'Parameter02lOUFSx'
            UserName: !If
              - ADAutomatedDelegation
              - !Ref 'Parameter07eFSxSvcAccount'
              - !Ref 'Parameter02aAdministrator'
            Password: !If
              - ADAutomatedDelegation
              - !Ref 'Parameter07gFSxPass'
              - !Ref 'Parameter02bAdministratorPassword'
Outputs:
  DomainAdministrator:
    Description: Domain Administrator Account.
    Value: !Join
      - ''
      - - !Ref 'Parameter02dNetBiosName'
        - \
        - !Ref 'Parameter02aAdministrator'
  DomainAdministratorUPN:
    Condition: CreateADFS
    Description: Credentials to logon via ADFS.
    Value: !Join
      - ''
      - - !Ref 'Parameter02aAdministrator'
        - '@'
        - !Ref 'Parameter02cDNSDomainName'
  ADFSLogonScreen:
    Condition: CreateADFS
    Description: ADFS logon screen.
    Value: !Join
      - ''
      - - https://
        - !Ref 'Parameter12bFederationServiceName'
        - .
        - !Ref 'Parameter02cDNSDomainName'
        - /adfs/ls/idpinitiatedsignon.aspx
  AdministrativeRole:
    Condition: CreateADFS
    Description: IAM Role for Administrative Access via ADFS.
    Value: !Ref 'RoleADFSAdminAccess'
  AdministrativeADGroup:
    Condition: CreateADFS
    Description: AD Group for Administrative Access via ADFS.
    Value: !Join
      - ''
      - - AWS-
        - !Ref 'AWS::AccountId'
        - '-'
        - !Ref 'RoleADFSAdminAccess'
  AppStreamRole:
    Condition: CreateADFS
    Description: IAM Role for AppStream Access via ADFS.
    Value: !Ref 'RoleADFSAppStream'
  AppStreamADGroup:
    Condition: CreateADFS
    Description: AD Group for AppStream Access via ADFS.
    Value: !Join
      - ''
      - - AWS-
        - !Ref 'AWS::AccountId'
        - '-'
        - !Ref 'RoleADFSAppStream'
  AppStreamRelayState:
    Condition: CreateADFS
    Description: AppStream Relay State URL.
    Value: !Join
      - ''
      - - https://
        - !Ref 'Parameter12bFederationServiceName'
        - .
        - !Ref 'Parameter02cDNSDomainName'
        - /adfs/ls/idpinitiatedsignon.aspx?RelayState=RPID%3Durn%253Aamazon%253Awebservices%26RelayState%3Dhttps%253A%252F%252F
        - appstream2.
        - !Ref 'AWS::Region'
        - .aws.amazon.com%252Fsaml%253Fstack%253D
        - !Ref 'AWS::StackName'
        - .AppStreamStack
        - '%2526accountId%253D'
        - !Ref 'AWS::AccountId'
  FSx:
    Condition: CreateFSx
    Description: FSx file system ID.
    Value: !Ref 'Resource12FSx01'
